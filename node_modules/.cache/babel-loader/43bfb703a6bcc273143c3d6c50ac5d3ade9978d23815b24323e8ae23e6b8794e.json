{"ast":null,"code":"var _jsxFileName = \"/Users/nakaharakenta/Desktop/HP/ portfolio/src/components/product/twitterClone/src/components/timeline/Timeline.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Timeline.css';\nimport TweetBox from './TweetBox';\nimport Post from './Post';\nimport db from '../../firebase';\nimport { collection,\n//getDocs,\nonSnapshot, orderBy, query } from \"firebase/firestore\";\nimport FlipMove from \"react-flip-move\"; //投稿が滑らかになるライブラリreact-flip-move\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Timeline() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const postData = collection(db, \"posts\"); //firebasedで作ったコレクション名を指定\n    const q = query(postData, orderBy(\"timestamp\", \"desc\")); ///上postDataで定義したpotsドキュメントのtimestampを最新順(desc)に並べ替える\n\n    //   getDocs(q).then((querySnapshot)=>{//thenはpstDataからDocsのデータが取得完了次第then以降を実行という意味（非同期処理でデータ取得には時間がかかるため）\n    // console.log(querySnapshot.docs.map((doc)=>doc.data()))//firebaseに保存したフィールドをオブジェクトとして確認できる\n    // setPosts(querySnapshot.docs.map((doc)=>doc.data()));\n\n    /**rリアルタイムでデータを取得 */\n    onSnapshot(q, querySnapShot => {\n      setPosts(querySnapShot.docs.map(doc => doc.data()));\n    });\n  }, []); //[]の中はトリガーを指し、空は起動時にみと言う意味になる\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timeline\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeline-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u30DB\\u30FC\\u30E0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(TweetBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(FlipMove, {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        displayName: post.displayName,\n        username: post.username,\n        verified: post.verified,\n        text: post.text,\n        avatar: post.avatar,\n        image: post.image\n      }, post.text, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 3\n  }, this);\n}\n_s(Timeline, \"X6mjf/w2X26pG8PLb9LvJbnNlKY=\");\n_c = Timeline;\nexport default Timeline;\nvar _c;\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"names":["React","useEffect","useState","TweetBox","Post","db","collection","onSnapshot","orderBy","query","FlipMove","jsxDEV","_jsxDEV","Timeline","_s","posts","setPosts","postData","q","querySnapShot","docs","map","doc","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","post","displayName","username","verified","text","avatar","image","_c","$RefreshReg$"],"sources":["/Users/nakaharakenta/Desktop/HP/ portfolio/src/components/product/twitterClone/src/components/timeline/Timeline.js"],"sourcesContent":["import React, { useEffect,useState  } from 'react'\nimport './Timeline.css'\nimport TweetBox from './TweetBox'\nimport Post from './Post'\nimport db from'../../firebase';\nimport {\n  collection,\n  //getDocs,\n  onSnapshot,\n  orderBy,\n  query,\n} from \"firebase/firestore\";\nimport FlipMove from \"react-flip-move\";//投稿が滑らかになるライブラリreact-flip-move\n\nfunction Timeline() {\n\n  const [posts,setPosts]=useState([]);\n\n\n  \n\n  useEffect(()=>{\n    const postData=collection(db,\"posts\");//firebasedで作ったコレクション名を指定\n    const q = query(postData,orderBy(\"timestamp\",\"desc\"));///上postDataで定義したpotsドキュメントのtimestampを最新順(desc)に並べ替える\n\n\n//   getDocs(q).then((querySnapshot)=>{//thenはpstDataからDocsのデータが取得完了次第then以降を実行という意味（非同期処理でデータ取得には時間がかかるため）\n// console.log(querySnapshot.docs.map((doc)=>doc.data()))//firebaseに保存したフィールドをオブジェクトとして確認できる\n// setPosts(querySnapshot.docs.map((doc)=>doc.data()));\n\n  /**rリアルタイムでデータを取得 */\n  onSnapshot(q,(querySnapShot)=>{\n    setPosts(querySnapShot.docs.map((doc)=>doc.data()));\n  })\n\n  },[]);//[]の中はトリガーを指し、空は起動時にみと言う意味になる\n\n\n  return (\n  <div className=\"timeline\">\n    <div className=\"timeline-header\">\n        <h2>ホーム</h2>\n    </div>\n    <TweetBox />\n\n\n    <FlipMove>\n    {posts.map((post) => (\n          <Post\n            key={post.text}\n            displayName={post.displayName}\n            username={post.username}\n            verified={post.verified}\n            text={post.text}\n            avatar={post.avatar}\n            image={post.image}\n\n          />\n        ))}\n        </FlipMove>\n</div>\n  )\n}\n\nexport default Timeline"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAACC,QAAQ,QAAS,OAAO;AAClD,OAAO,gBAAgB;AACvB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,EAAE,MAAK,gBAAgB;AAC9B,SACEC,UAAU;AACV;AACAC,UAAU,EACVC,OAAO,EACPC,KAAK,QACA,oBAAoB;AAC3B,OAAOC,QAAQ,MAAM,iBAAiB,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAElB,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAACd,QAAQ,CAAC,EAAE,CAAC;EAKnCD,SAAS,CAAC,MAAI;IACZ,MAAMgB,QAAQ,GAACX,UAAU,CAACD,EAAE,EAAC,OAAO,CAAC,CAAC;IACtC,MAAMa,CAAC,GAAGT,KAAK,CAACQ,QAAQ,EAACT,OAAO,CAAC,WAAW,EAAC,MAAM,CAAC,CAAC,CAAC;;IAG1D;IACA;IACA;;IAEE;IACAD,UAAU,CAACW,CAAC,EAAEC,aAAa,IAAG;MAC5BH,QAAQ,CAACG,aAAa,CAACC,IAAI,CAACC,GAAG,CAAEC,GAAG,IAAGA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC;EAEF,CAAC,EAAC,EAAE,CAAC,CAAC;;EAGN,oBACAX,OAAA;IAAKY,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvBb,OAAA;MAAKY,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC5Bb,OAAA;QAAAa,QAAA,EAAI;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC,eACNjB,OAAA,CAACT,QAAQ;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGZjB,OAAA,CAACF,QAAQ;MAAAe,QAAA,EACRV,KAAK,CAACM,GAAG,CAAES,IAAI,iBACVlB,OAAA,CAACR,IAAI;QAEH2B,WAAW,EAAED,IAAI,CAACC,WAAY;QAC9BC,QAAQ,EAAEF,IAAI,CAACE,QAAS;QACxBC,QAAQ,EAAEH,IAAI,CAACG,QAAS;QACxBC,IAAI,EAAEJ,IAAI,CAACI,IAAK;QAChBC,MAAM,EAAEL,IAAI,CAACK,MAAO;QACpBC,KAAK,EAAEN,IAAI,CAACM;MAAM,GANbN,IAAI,CAACI,IAAI;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQf,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEN;AAACf,EAAA,CAhDQD,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAkDjB,eAAeA,QAAQ;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}